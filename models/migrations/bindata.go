// Code generated by go-bindata.
// sources:
// models/migrations/1489143364_initial_schema.down.sql
// models/migrations/1489143364_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1489143364_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x6a\x85\x30\x10\x85\xf7\x79\x8a\xbc\x40\x9e\xc0\x55\x4b\x2d\x08\x85\x4a\x95\xfe\xac\x44\xd2\x51\x83\xe9\xa4\x98\x64\xe1\xdb\x97\x44\x7b\xef\x95\x9b\x04\x45\x97\x73\xe6\x9c\x8f\x9c\x91\x31\xfa\x5e\xe4\x1f\x15\x21\x8c\x51\x16\xfc\x9c\xc2\x87\x56\x4a\xc0\x1e\x74\x33\x08\x34\x3a\xb1\x4d\x9e\xde\x5e\x4b\x1f\x4a\x8b\x67\x9a\x7f\x16\x55\x5d\xdd\xf9\xb3\xfd\x3c\x29\x46\x38\xc3\xf3\xfe\x03\x3c\xad\xa4\x35\x42\xe1\x19\xe6\x25\x63\xe1\xd6\x0f\x8f\x2f\x79\xb0\x62\x37\xd2\x60\x8c\xc0\x3e\xc4\x5b\x41\xde\x7f\x43\xfa\x77\x64\xab\xfc\x55\x6e\x54\xae\x26\x81\x7d\x63\xe6\x5f\x08\xbe\xdb\x8d\x62\xad\x46\x88\xf1\x12\xdd\xa8\x45\x54\x16\x39\xfc\x40\xf8\xd7\x88\x84\x6e\x6c\xd1\xf0\xd4\x3d\x62\xfd\x6c\xeb\x4f\xde\x7b\x7f\xea\xd5\x13\xee\xfd\x5b\x74\x9d\xe0\x56\x9a\x39\x8a\x35\x6a\x84\x23\x0f\x59\xf6\xc3\x38\xaf\xa5\x8f\x6c\x35\x4c\x07\x68\x7e\x3d\x23\x7f\x01\x00\x00\xff\xff\x24\xb7\x34\x3a\x13\x04\x00\x00")

func _1489143364_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1489143364_initial_schemaDownSql,
		"1489143364_initial_schema.down.sql",
	)
}

func _1489143364_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1489143364_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1489143364_initial_schema.down.sql", size: 1043, mode: os.FileMode(420), modTime: time.Unix(1538751810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1489143364_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x51\x93\xb2\x36\x14\x7d\xe7\x57\xdc\x07\x67\xd4\xce\xfa\xd0\xe7\x9d\x3e\xa0\x5e\xfd\x68\x11\x2c\x60\xbf\xcf\xe9\x74\x98\x14\xb2\x9a\x59\x04\x86\xc4\xb6\xfe\xfb\x4e\x82\x2e\x01\x03\xad\xbb\xdd\xa7\xf2\x14\xe1\xe4\x26\xe7\xde\x93\x73\xe3\x6c\x06\x91\x3d\x77\x31\xb4\xac\xd9\x0c\x66\xed\x47\xbe\x3a\x73\x5a\x71\xd3\x37\x6b\x11\xa0\x1d\x61\x3d\x1d\x9c\x15\x78\x7e\x04\xf8\xcd\x09\xa3\xd0\x52\x93\x60\x62\x01\xb0\x14\xb4\x27\xc4\xc0\xb1\x5d\x39\xda\x06\xce\xc6\x0e\xf6\xf0\x13\xee\x9f\x2c\x80\x9c\x9c\x68\x03\x8b\xf0\x5b\x54\x8f\x64\x4c\x6f\xe7\xba\xb0\xf3\x9c\x9f\x77\x28\xa1\xf4\x44\x58\xf6\xef\xa0\x25\xe1\xfc\xcf\xa2\x4a\xe3\x23\xe1\x47\x03\x54\x62\x18\x8f\x49\x22\xd8\x1f\x44\xd0\x14\x60\xee\xfb\x2e\xda\x5e\x07\x43\xff\x12\x15\x79\x5b\xf2\xc7\xd0\xf7\xe6\x77\x71\x92\x8a\xca\x10\x31\x11\x6a\x5b\xce\x06\xc3\xc8\xde\x6c\x5b\x98\x73\x99\x0e\x62\xac\xe9\x73\x5f\x19\x44\xf1\x4a\x73\x73\x1d\x96\x3e\x8c\x46\x16\xc0\x1c\xd7\x8e\x67\xc9\xc8\xad\x62\xc0\x24\x44\x17\x17\x11\x7c\x0f\xab\xc0\xdf\x40\x79\x88\xc5\xa5\xa4\xf0\xf5\x0b\x06\x08\xe2\x52\xaa\xdc\xff\x00\x63\xb5\x84\xfa\x36\x9e\x42\xf4\x05\xeb\x58\x00\xb7\x3a\xef\xb7\x08\x0d\x06\xec\x10\xd0\xdb\x6d\x26\xe3\x5b\xfa\xc6\x4f\x30\xae\x28\xa7\x62\x3c\x7d\x56\x53\xd1\x5b\x82\xb3\x92\x63\xf4\x96\xd6\x68\xf4\x3c\xa8\x99\x9a\x61\x57\x34\x8d\x62\xba\x92\x91\x1a\x8b\x6b\xa4\xe3\x45\xb8\xc6\xa0\xa5\x82\x00\x57\x18\xa0\xb7\xc0\x10\xae\x6a\x64\xe9\x14\x7c\x0f\x96\xe8\x62\x84\xb0\xb0\xc3\x85\xbd\x54\x32\x51\x2b\x77\xe5\xd4\x2a\x9c\x22\x5c\x3f\x5a\x06\xda\x12\x29\x59\x45\xb9\x2c\x6d\x53\xd7\x3e\x81\x18\x10\x03\xa5\x4f\x8e\x24\xcb\x68\x7e\xa0\x9f\x5b\xfe\x94\xbd\xbc\xb0\xe4\x9c\x89\x4b\x7f\xf9\x1b\x4c\x53\x7e\x4a\xf8\x45\x96\xfe\x44\x53\x76\x3e\xc9\xd1\x91\x54\xe9\xfb\x34\xd0\x50\xbd\x33\x0f\x4d\x08\x26\x35\x08\x26\x32\x7a\xe7\x09\xf7\x95\x4c\x88\xa0\x87\xa2\x62\x94\xd7\xb8\x5f\x7f\x33\xe3\xca\x82\xe5\x82\xd7\xef\x35\x79\xdd\xe1\x52\xca\x93\x8a\x95\x82\x15\xf9\xe0\xba\x5a\xe6\xf4\xb1\x0e\x79\xc9\xc8\xa1\x76\xaa\x61\x0a\x8c\xc7\x59\x91\xbc\x4a\xbb\xd2\xfc\xca\x40\x55\x73\x24\x4d\x71\x77\x38\xdd\x95\xfa\x70\x03\xf2\xe4\x45\x76\x96\xf4\x1f\x6e\x12\x6f\x13\x55\xad\xb5\xe3\xac\x67\xfc\x3d\xe7\xf9\x4d\x45\x32\xde\x70\x28\x5d\x70\xfd\xf1\x74\x6b\x37\x3b\xbb\xa6\x46\x98\x5c\xa9\x3c\xb5\x36\x32\x1d\x48\x21\xc9\xf3\xe2\x9c\x27\xf4\x44\x73\xf1\x70\x1a\x5b\x93\xef\x7b\x6e\x6f\xcb\xd5\x4f\x4c\x4f\x6f\xfc\xbd\x48\x2f\x30\x0c\xe9\xc9\xf5\x27\xa4\xb8\xd5\x3c\x1f\xea\x9d\x19\x7b\xed\xf1\xce\x81\xb4\xaa\x49\xff\x7b\x65\x72\x2a\x04\xcb\x0f\x9f\xdb\x79\x78\x52\x54\x2c\x3f\xfc\xc3\xd5\x43\x47\x35\xdd\x27\xc9\x08\xe7\x2c\x91\x6d\x27\xbd\xe4\xe4\xc4\x92\xf7\x75\x9e\x1b\x51\x55\x71\x00\x2e\x48\x25\xf8\xf5\xa2\xd6\xb1\x45\x3d\xbb\x00\x34\x4f\x1b\xdc\x20\x52\x6f\x3d\xd0\xe9\x3e\x6d\x64\x8b\x6a\xe7\xa7\x19\x59\x92\x8a\x9c\xb8\x76\x35\x35\x78\xf7\x2f\x0e\x7e\x35\x5e\xf3\x8d\x77\x8d\x78\xc8\xd7\xbb\x07\xc8\x0f\x20\xc0\xad\x6b\x2f\x50\xad\x62\x0c\x03\x76\x68\xd5\x82\xe8\x1c\x04\xc9\x64\xe1\xef\xbc\x68\xf2\xdd\x54\x16\x36\x29\xce\xb9\x90\x2f\xed\x20\xb0\xf7\xb1\xbd\x5e\xdf\x74\xab\x3e\xd7\x7f\x48\x94\xa2\x9a\x2d\xae\x03\x7f\xb7\x85\xf9\xbe\x15\xd8\xa8\x6a\x33\xd9\x3e\x8b\x78\x80\x68\x6d\x18\xff\x3d\xc9\x7a\x6b\x1f\x25\x78\x64\xe6\xd6\xf2\x00\x41\x15\xe2\x23\x04\xaf\xdc\xda\xdd\x4e\x71\x6c\xbf\xaa\x0d\xa2\xed\x95\x61\x23\xe7\x9e\x54\xfc\x1d\x00\x00\xff\xff\x9f\x8e\x82\x9d\xca\x0e\x00\x00")

func _1489143364_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1489143364_initial_schemaUpSql,
		"1489143364_initial_schema.up.sql",
	)
}

func _1489143364_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1489143364_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1489143364_initial_schema.up.sql", size: 3786, mode: os.FileMode(420), modTime: time.Unix(1538751803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1489143364_initial_schema.down.sql": _1489143364_initial_schemaDownSql,
	"1489143364_initial_schema.up.sql":   _1489143364_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1489143364_initial_schema.down.sql": &bintree{_1489143364_initial_schemaDownSql, map[string]*bintree{}},
	"1489143364_initial_schema.up.sql":   &bintree{_1489143364_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
